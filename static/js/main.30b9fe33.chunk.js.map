{"version":3,"sources":["logo.svg","Component.js","App.js","reportWebVitals.js","index.js"],"names":["Component","url","panelSetup","Array","from","keys","useState","ongoing","setOngoing","sensorsData","setSensorsData","pins","setPins","setSensors","Ycoord","setYcoord","fetchPins","a","axios","get","then","result","data","register","coord","patch","sensorValue","catch","error","console","log","push","fetchSensors","useEffect","timing","setInterval","clearInterval","class","map","pin","pinName","pinValue","onClick","name","id","toString","panel","style","backgroundColor","parseFloat","toFixed","height","onMouseOver","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30b9fe33.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport \"./App.css\";\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nfunction Component() {\r\n\r\n    const url = \"https://shrouded-hamlet-51189.herokuapp.com\";\r\n    const panelSetup  = Array.from(Array(100).keys());\r\n    const [ongoing, setOngoing] = useState(false);\r\n    const [sensorsData, setSensorsData] = useState([]);\r\n  \r\n    const [pins,setPins] = useState([]);\r\n    const [sensors,setSensors] = useState([]);\r\n    const [Ycoord, setYcoord] = useState(\"0.0\");\r\n    \r\n    async function fetchPins(){// get call to map buttons\r\n      await axios.get(url+'/pins')\r\n      .then(result => setPins(result.data));\r\n    }\r\n\r\n    async function fetchSensors(){// get call to map buttons\r\n        await axios.get(url+'/sensors')\r\n        .then(result => setSensors(result.data));\r\n      }\r\n  \r\n    function pinOn(name){ // patch to put another pin in\r\n      axios.patch(url+'/pins/' +name ,{\r\n        pinValue: true, // setting pin value to 1, to signify that the pin is active\r\n      }).catch((error) => console.log('Error: ', error))\r\n      fetchPins();\r\n    }\r\n  \r\n    function pinOff(name){ // patch to put pin off\r\n      axios.patch(url+'/pins/' +name ,{\r\n        pinValue: false,\r\n      }).catch((error) => console.log('Error: ', error))\r\n      fetchPins();\r\n    }\r\n\r\n    function register(coord){\r\n        axios.patch(url+'/sensors/heightSensor',{\r\n            sensorValue: coord,\r\n        }).catch((error) => console.log('Error: ', error))\r\n        sensorsData.push(coord);\r\n        fetchSensors();\r\n    }\r\n\r\n    function pushValue(coord){\r\n        setYcoord(coord);\r\n    }\r\n\r\n    function start(){\r\n        setOngoing(true);\r\n    }\r\n\r\n    function stop(){\r\n        setSensorsData([]);\r\n        setOngoing(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchPins();\r\n        let timing = null;\r\n        (ongoing?\r\n            timing = setInterval(() => register(Ycoord), 1000)\r\n            :\r\n            clearInterval(timing)\r\n        )\r\n        return () => clearInterval(timing);\r\n      }, [ongoing,Ycoord]);\r\n  \r\n    return (\r\n      <div class=\"main\"> \r\n        <div class=\"half\">\r\n          <h1>Pin simulation</h1>\r\n          <p>The boolean value of the pin is rendered from the api (via GET call). If the value happens to\r\n              be \"true\", then we can see the pin is <b>On</b> and vice versa. When the button is \r\n              clicked, an api call is made to update the value to an opposite boolean value.\r\n          </p> \r\n          {pins.map(pin =>  \r\n          <ul class = \"pinDisplay\">\r\n          <ul key= {pin.id} >\r\n          Pin {pin.pinName} is \r\n          {pin.pinValue\r\n          ? \r\n          <div>\r\n          <b>On</b>\r\n          <button class=\"off\" onClick={()=> pinOff(pin.pinName)}>Double click to Turn off</button>\r\n          </div>\r\n          : \r\n          <div>\r\n          <b>Off</b>\r\n          <button class=\"on\" onClick={()=> pinOn(pin.pinName)}>Double click to Turn on</button>\r\n          </div>\r\n          }\r\n          </ul>\r\n          </ul>\r\n          )}\r\n  \r\n        </div>\r\n        <div class=\"half\">\r\n        <h1>Sensor simulation</h1>\r\n        <p>\r\n            Instead of a temperature sensor, the following simulation will measure the position of the \r\n            y coordinate of the mouse at a specified field (below). Clicking the button will trigger \r\n            a panel to open up - every second the y coordinate of the cursor with regards to the panel\r\n            is collected and the sensor value is changed in the API (via a PATCH call).\r\n            The process will last for 10 seconds. A CSV file containing the values can then be downloaded.\r\n        </p>\r\n        \r\n\r\n        <button onClick= {()=> start()}>Start</button>\r\n        <button onClick= {()=> stop()}>Stop</button>\r\n        <CSVLink data={sensorsData.toString()}>Download the changes</CSVLink>\r\n        <p>Current sensor value: {Ycoord}</p>\r\n        <p>Current collected information {sensorsData.toString()}</p>\r\n        {panelSetup.map(panel => \r\n            <div style={{backgroundColor: \"rgba(200, 0, 0,\" + (parseFloat((panel/100).toFixed(2))).toString()+\")\" , height: \"2px\"}} class=\"strip\" onMouseOver = {() => pushValue(parseFloat((panel/100).toFixed(2)))}>\r\n                {panel%10==0 ?\r\n                <small>0.{panel}</small>\r\n                :\r\n                null}\r\n            </div>)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Component;","import logo from './logo.svg';\nimport './App.css';\nimport {useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport Component from './Component';\nimport { Router, Route } from 'react-router-dom';\n\nfunction App() {\n\n\n  return (\n    <div class=\"main\">\n      <Component/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}