{"version":3,"sources":["logo.svg","Component.js","App.js","reportWebVitals.js","index.js"],"names":["Component","url","panelSetup","Array","from","keys","useState","ongoing","setOngoing","sensorsData","setSensorsData","pins","setPins","Ycoord","setYcoord","fetchPins","a","axios","get","then","result","data","useEffect","timing","setInterval","coord","patch","sensorValue","catch","error","console","log","push","clearInterval","class","map","pin","pinName","pinValue","onClick","name","id","toString","panel","style","backgroundColor","parseFloat","toFixed","height","onMouseOver","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a50da53f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport \"./App.css\";\r\nimport { CSVLink} from \"react-csv\";\r\nfunction Component() {\r\n    // the url shows the user where the api is deployed - data is accessable from there\r\n    const url = \"https://shrouded-hamlet-51189.herokuapp.com\";\r\n\r\n    // a panel is setup to be mapped to div elements with different values\r\n    const panelSetup  = Array.from(Array(100).keys());\r\n\r\n    // the hooks represent states under which the functions will operate, or the panels will be\r\n    // mapped from the api resource\r\n    const [ongoing, setOngoing] = useState(false);\r\n    const [sensorsData, setSensorsData] = useState([]);\r\n    const [pins,setPins] = useState([]);\r\n    // an initial value of 0.0 is initialized for the cursor\r\n    const [Ycoord, setYcoord] = useState(\"0.0\");\r\n    \r\n    // the function fetches all the Pin resource representations from the api\r\n    async function fetchPins(){// get call to map buttons\r\n      await axios.get(url+'/pins')\r\n      .then(result => setPins(result.data));\r\n    }\r\n  \r\n    // the function turns the pin value to 'On' by using a patch call and changing the value of the pin\r\n    function pinOn(name){ // patch to put another pin in\r\n      axios.patch(url+'/pins/' +name ,{\r\n        pinValue: true, // setting pin value to 1, to signify that the pin is active\r\n      }).catch((error) => console.log('Error: ', error))\r\n      fetchPins();\r\n    }\r\n  \r\n    // alternatively, the value can be set to false in an effort to turn the pin off\r\n    function pinOff(name){ // patch to put pin off\r\n      axios.patch(url+'/pins/' +name ,{\r\n        pinValue: false,\r\n      }).catch((error) => console.log('Error: ', error))\r\n      fetchPins();\r\n    }\r\n\r\n    // for the coordinate tracking sensor simulation, this function sets the value of the cursor\r\n    // to be patched into the sensor api.\r\n    function register(coord){\r\n        axios.patch(url+'/sensors/heightSensor',{\r\n            sensorValue: coord,\r\n        }).catch((error) => console.log('Error: ', error))\r\n        sensorsData.push(coord);\r\n    }\r\n\r\n    // the pin value is changed\r\n    function pushValue(coord){\r\n        setYcoord(coord);\r\n    }\r\n\r\n    // this function sets the 'Ongoing' hook to true\r\n    function start(){\r\n        setOngoing(true);\r\n    }\r\n\r\n    // this function cleans the array where the sensor values are collected and turns off the \r\n    // 'Ongoing' hook by setting it to false\r\n    function stop(){\r\n        setSensorsData([]);\r\n        setOngoing(false);\r\n    }\r\n\r\n    // useEffect is a hook that is executing it's contents repeatedly.\r\n    // first, we make sure we are shown the freshest api value representation by fetching the pins,\r\n    // for the pin simulation\r\n    // for the sensor simulation, we initialize a timing variable and set it to null in the begining.\r\n    // when the ongoing hook is activated, we fire off the 'register' function every 1000 ms (1s)\r\n    // when the ongoing hook is deactivated, timing is cleared.\r\n    useEffect(() => {\r\n        fetchPins();\r\n        let timing = null;\r\n        (ongoing?\r\n            timing = setInterval(() => register(Ycoord), 1000)\r\n            :\r\n            clearInterval(timing)\r\n        )\r\n        return () => clearInterval(timing);\r\n      }, [ongoing,Ycoord]);\r\n  \r\n    return (\r\n      <div class=\"main\"> \r\n        <div class=\"half\">\r\n          <h1>Pin simulation</h1>\r\n          <p>The boolean value of the pin is rendered from the api (via GET call). If the value happens to\r\n              be \"true\", then we can see the pin is <b>On</b> and vice versa. When the button is \r\n              clicked, an api call is made to update the value to an opposite boolean value.\r\n          </p> \r\n          {pins.map(pin =>  \r\n          <ul class = \"pinDisplay\">\r\n          <ul key= {pin.id} >\r\n          Pin {pin.pinName} is \r\n          {pin.pinValue\r\n          ? \r\n          <div>\r\n          <b>On</b>\r\n          <button class=\"off\" onClick={()=> pinOff(pin.pinName)}>Double click to Turn off</button>\r\n          </div>\r\n          : \r\n          <div>\r\n          <b>Off</b>\r\n          <button class=\"on\" onClick={()=> pinOn(pin.pinName)}>Double click to Turn on</button>\r\n          </div>\r\n          }\r\n          </ul>\r\n          </ul>\r\n          )}\r\n  \r\n        </div>\r\n        <div class=\"half\">\r\n        <h1>Sensor simulation</h1>\r\n        <p>\r\n            Instead of a temperature sensor, the following simulation will measure the position of the \r\n            y coordinate of the mouse at a specified field (below). Clicking the button will trigger \r\n            a panel to open up - every second the y coordinate of the cursor with regards to the panel\r\n            is collected and the sensor value is changed in the API (via a PATCH call).\r\n            The process will last from clicking 'start' to clicking 'stop'. A CSV file containing the values can then be downloaded.\r\n        </p>\r\n        \r\n\r\n        <button onClick= {()=> start()}>Start</button>\r\n        <button onClick= {()=> stop()}>Stop</button>\r\n        <CSVLink data={sensorsData.toString()}>Download the changes</CSVLink>\r\n        <p>Current sensor value: {Ycoord}</p>\r\n        <p>Current collected information {sensorsData.toString()}</p>\r\n\r\n        {panelSetup.map(panel => \r\n            <div style={{backgroundColor: \"rgba(200, 0, 0,\" + (parseFloat((panel/100).toFixed(2))).toString()+\")\" , height: \"2px\"}} class=\"strip\" onMouseOver = {() => pushValue(parseFloat((panel/100).toFixed(2)))}>\r\n                {panel%10==0 ?\r\n                <small>0.{panel}</small>\r\n                :\r\n                null}\r\n            </div>)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Component;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport {useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport Component from './Component';\r\nimport {Router, Route } from 'react-router-dom';\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div class=\"main\">\r\n      <Component/>\r\n    </div>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n    <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}